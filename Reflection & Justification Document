
### **Reflection & Justification Document**

**Project Title:** UAV Strategic Deconfliction in Shared Airspace
**Author:** Rithwiq Sunil Nair
**Date:** 2025-06-01

---

#### **Design Decisions & Architectural Choices**

The system is designed around modular components for **data ingestion**, **spatial and temporal conflict checks**, and **visualization**. The `main.py` file acts as the orchestrator, calling functions from helper modules to parse flight data, evaluate conflicts, and output results. Simulated flight paths and the primary drone mission are modeled as time-annotated waypoints, allowing efficient spatio-temporal comparison. Numpy arrays and dictionary-based structures were chosen for their speed and readability in handling trajectory data.

---

#### **Spatial & Temporal Conflict Checks**

* **Spatial Check:**
  Each segment of the primary droneâ€™s path is compared against the paths of other drones. A minimum safety buffer radius is used to determine conflict using Euclidean distance in 2D (or 3D if extended).

* **Temporal Check:**
  For every potentially conflicting spatial zone, timestamps are compared. A conflict is confirmed only if both spatial proximity and time window overlap exist. This dual-layer filter ensures precise deconfliction.

---

#### **AI Integration**

AI tools such as **ChatGPT** Plus & **Claude** were used for:

* Accelerating code structure design and debugging
* Generating efficient conflict-checking logic
* Creating reusable utility functions
  These tools saved development time, offered clarity on logic paths, and were especially helpful in edge case handling and testing logic refinement.

---

#### **Testing Strategy & Edge Cases**

* Designed scenarios included:

  * A conflict-free mission
  * Temporal overlap without spatial proximity
  * Spatial overlap with non-overlapping time
  * Both spatial and temporal overlap (true conflict)
* Edge cases handled:

  * Multiple drones conflicting at the same waypoint
  * Very close but non-overlapping paths
  * Simultaneous arrival at shared airspace from different altitudes (in 3D)

Testing was done via hardcoded missions and randomized flight schedules, visualized through Matplotlib to manually verify results.

---

#### **Scalability for Real-World Deployment**

To handle real-world data from tens of thousands of drones, the following enhancements are required:

* **Distributed Architecture**: Use cloud-native microservices for ingestion, processing, and querying.
* **Real-Time Data Streaming**: Integrate Kafka or MQTT for real-time updates.
* **High-Performance Computing**: Leverage spatial indexing (e.g., R-trees), GPU-accelerated computation, and in-memory caching for faster conflict detection.
* **Scalable Visualization**: Employ WebGL/Deck.gl for browser-based large-scale rendering.
* **Redundancy & Fault Tolerance**: Ensure mission-critical reliability via container orchestration (e.g., Kubernetes).

---

This project demonstrated the feasibility of a lightweight strategic deconfliction engine, and laid foundational understanding of how UAV traffic can be safely managed at scale.

